import java.awt.Component;
import java.awt.Container;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class MealsPanel extends javax.swing.JPanel {
    private ActionOrder fetchMeals;
    private Database database;
    private ButtonModel previousShift;
    private Container container;
    private WelcomePanel welcomePanel;
    
    public MealsPanel()
    {
        // do nothing
    }
    
    public MealsPanel(Database database, Container container, WelcomePanel welcomePanel) 
    {
        this.database = database;
        this.container = container;
        this.welcomePanel = welcomePanel;
        initComponents();
        shiftGroup.setSelected(shiftMorning.getModel(), true);
        fetchMeals = new FetchMeals(database, 1, this);
        fullName.setText(database.getFullName());
        fetchMeals.execute();
        refreshGroupButtons();
        loadAllergensLegendItems();
    }    
    
    public void addDay(DailyMealsList day)
    {
        listsPanel.add(day);
    }
    
    public JPanel getMealsListPanel()
    {
        return listsPanel;
    }
    
    private void checkForChanges()
    {
        // if there are missmatches between stored meal selection and current meal selection
        if(storeChanges(false))
        {
            database.retrieve(database.getUserAccount().getUserId());
            
            fetchMeals = new FetchMeals(database, Integer.valueOf(shiftGroup.getSelection().getActionCommand()), this);
            fetchMeals.execute();
        }
        else
            shiftGroup.setSelected(previousShift, true);
        
        refreshGroupButtons();
    }
    
    private void store(DailyMealsList list, boolean update, boolean delete)
    {
        StoreMeals sm = new StoreMeals(database, list.getOldMealID(), list.getNewMealID(), update, delete);
        sm.execute();
    }
    
    private boolean storeChanges(boolean storeChanges)
    {
        // if same shift is selected do nothing
        if(previousShift == shiftGroup.getSelection())
            return false;
        
        int option = -1;
        for(int i = 0; i<listsPanel.getComponentCount(); i++)
        {
            DailyMealsList l = (DailyMealsList) listsPanel.getComponent(i);
            
            if(l.hasChanged())
                // storeChanges on Confirm&Exit == true
                if(storeChanges)
                {
                    store(l, l.hasPreviousOrderEntry(), (l.getSelectedIndex() == -1 && l.getOldMealID() > -1));
                }
                else
                {
                    option = JOptionPane.showConfirmDialog (null, "Would You Like to Save Your Changes First?","Warning",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
                
                    switch(option)
                    {
                        case 0: // yes
                            storeChanges = true; // skip prompt for next changes
                            // store first change
                            store(l, l.hasPreviousOrderEntry(), (l.getSelectedIndex() == -1 && l.getOldMealID() > -1));
                            break;
                        case 1: // no
                            return true;
                        case 2: // cancel
                            return false;
                        default:
                            break;
                    }
                }
        }
        
        return true;
    }
    
    private void refreshGroupButtons()
    {
        Enumeration<AbstractButton> e = shiftGroup.getElements();
        while(e.hasMoreElements())
        {
            e.nextElement().setEnabled(true);
        }
        
        shiftGroup.getSelection().setEnabled(false);
    }
    
    private void storePreviousShift()
    {
        previousShift = shiftGroup.getSelection();
    }
    
    private void loadAllergensLegendItems()
    {
        Allergens allergens = new Allergens(true, Allergens.ICON_SIZE_TWENTYONE);
        
        for(int i = 1; i<=14; i++)
        {
            AllergensLegendItem allergensLegendItem = new AllergensLegendItem(allergens.getIconName(i), allergens.getIcon(i));
            allergensLegendItem.setAlignmentX(Component.CENTER_ALIGNMENT);
            legendPanel.add(allergensLegendItem);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shiftGroup = new javax.swing.ButtonGroup();
        fullName = new javax.swing.JLabel(database.getFullName());
        ConfirmAndExit = new javax.swing.JButton();
        listsPanel = new javax.swing.JPanel();
        shiftMorning = new javax.swing.JRadioButton();
        shiftAfternoon = new javax.swing.JRadioButton();
        shiftNight = new javax.swing.JRadioButton();
        legendPanel = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(800, 400));
        setPreferredSize(new java.awt.Dimension(1920, 1080));

        fullName.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        fullName.setText("<<Full Name>>");

        ConfirmAndExit.setBackground(new java.awt.Color(153, 255, 153));
        ConfirmAndExit.setText("Confirm & Exit");
        ConfirmAndExit.setMaximumSize(new java.awt.Dimension(150, 150));
        ConfirmAndExit.setMinimumSize(new java.awt.Dimension(100, 100));
        ConfirmAndExit.setPreferredSize(new java.awt.Dimension(150, 150));
        ConfirmAndExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ConfirmAndExitMouseReleased(evt);
            }
        });

        listsPanel.setLayout(new javax.swing.BoxLayout(listsPanel, javax.swing.BoxLayout.LINE_AXIS));

        shiftGroup.add(shiftMorning);
        shiftMorning.setText("Morning Shift");
        shiftMorning.setActionCommand("1");
        shiftMorning.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                shiftMorningMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                shiftMorningMouseReleased(evt);
            }
        });

        shiftGroup.add(shiftAfternoon);
        shiftAfternoon.setText("Afternoon Shift");
        shiftAfternoon.setActionCommand("2");
        shiftAfternoon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                shiftAfternoonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                shiftAfternoonMouseReleased(evt);
            }
        });

        shiftGroup.add(shiftNight);
        shiftNight.setText("Night Shift");
        shiftNight.setActionCommand("3");
        shiftNight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                shiftNightMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                shiftNightMouseReleased(evt);
            }
        });

        legendPanel.setBackground(new java.awt.Color(240, 240, 240));
        legendPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 3, 0));
        legendPanel.setMaximumSize(new java.awt.Dimension(0, 0));
        legendPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        legendPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        legendPanel.setLayout(new javax.swing.BoxLayout(legendPanel, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(legendPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(listsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(fullName))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(shiftMorning)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(shiftAfternoon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(shiftNight)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1334, Short.MAX_VALUE)
                        .addComponent(ConfirmAndExit, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fullName)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shiftMorning)
                            .addComponent(shiftAfternoon)
                            .addComponent(shiftNight)))
                    .addComponent(ConfirmAndExit, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(listsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 330, Short.MAX_VALUE)
                .addComponent(legendPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ConfirmAndExitMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConfirmAndExitMouseReleased
        storeChanges(true);
        database.disconnect();
        this.setVisible(false);
        container.add(welcomePanel);
        welcomePanel.setVisible(true);
        welcomePanel.getPasswordField().setText("");
        welcomePanel.getPasswordField().requestFocusInWindow();
        container.validate();
    }//GEN-LAST:event_ConfirmAndExitMouseReleased

    private void shiftMorningMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftMorningMouseReleased
        checkForChanges();
    }//GEN-LAST:event_shiftMorningMouseReleased

    private void shiftAfternoonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftAfternoonMouseReleased
        checkForChanges();
    }//GEN-LAST:event_shiftAfternoonMouseReleased

    private void shiftNightMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftNightMouseReleased
        checkForChanges();
    }//GEN-LAST:event_shiftNightMouseReleased

    private void shiftMorningMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftMorningMousePressed
        storePreviousShift();
    }//GEN-LAST:event_shiftMorningMousePressed

    private void shiftAfternoonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftAfternoonMousePressed
        storePreviousShift();
    }//GEN-LAST:event_shiftAfternoonMousePressed

    private void shiftNightMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftNightMousePressed
        storePreviousShift();
    }//GEN-LAST:event_shiftNightMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConfirmAndExit;
    private javax.swing.JLabel fullName;
    private javax.swing.JPanel legendPanel;
    private javax.swing.JPanel listsPanel;
    private javax.swing.JRadioButton shiftAfternoon;
    private javax.swing.ButtonGroup shiftGroup;
    private javax.swing.JRadioButton shiftMorning;
    private javax.swing.JRadioButton shiftNight;
    // End of variables declaration//GEN-END:variables
}
